{
  "type": "NativeObject",
  "description": "Base class for all objects with a native implementation.",
  "constructor": {
    "access": "protected",
    "parameters": [
      {
        "name": "properties",
        "type": "PropertiesObject",
        "ts_type": "Properties<NativeObject>",
        "optional": true,
        "description": "Sets all key-value pairs in the properties object as widget properties."
      }
    ]
  },
  "properties": {
    "cid": {
      "type": "string",
      "readonly": true,
      "static": true,
      "description": "An application-wide unique identifier automatically assigned to all native objects on creation."
    }
  },
  "methods": {
    "on": [
      {
        "parameters": [
          {
            "name": "type",
            "type": "string",
            "description": "The type of events to listen for."
          },
          {
            "name": "listener",
            "type": "(event: any) => void",
            "description": "The listener function to register. This function will be called with an event object."
          },
          {
            "name": "context",
            "type": "object",
            "optional": true,
            "description": "In the listener function, `this` will point to this object. If not present, the listener will be called in the context of this object."
          }
        ],
        "returns": "this",
        "description": "Registers a *listener* function to be notified of events of the given *type*."
      },
      {
        "parameters": [
          {
            "name": "listeners",
            "type": "EventsObject",
            "description": "A key-value map where the keys are event types and the values are the listeners to register for these events, e.g. `{tap: onTap, scroll: onScroll}`."
          }
        ],
        "returns": "this",
        "description": "Registers all listeners in the given object for the event type indicated by their key."
      }
    ],
    "once": [
      {
        "parameters": [
          {
            "name": "type",
            "type": "string",
            "description": "The type of the event to listen for."
          },
          {
            "name": "listener",
            "type": "(event: any) => void",
            "description": "The listener function to register. This function will be called with an event object."
          },
          {
            "name": "context",
            "type": "object",
            "optional": true,
            "description": "In the listener function, `this` will point to this object. If not present, the listener will be called in the context of this object."
          }
        ],
        "returns": "this",
        "description": "Same as `on`, but removes the listener after it has been invoked by an event."
      },
      {
        "parameters": [
          {
            "name": "listeners",
            "type": "EventsObject",
            "description": "A key-value map where the keys are event types and the values are the listeners to register for these events, e.g. `{tap: onTap, scroll: onScroll}`."
          }
        ],
        "returns": "this",
        "description": "Same as `on`, but removes the listener after it has been invoked by an event."
      }
    ],
    "off": [
      {
        "parameters": [
          {
            "name": "type",
            "type": "string",
            "description": "The type of events to remove listeners for."
          },
          {
            "name": "listener",
            "type": "(event: any) => void",
            "description": "The listener function to remove."
          },
          {
            "name": "context",
            "type": "object",
            "optional": true,
            "description": "The context of the bound listener to remove."
          }
        ],
        "returns": "this",
        "description": "Removes all occurrences of *listener* that are bound to *type* and *context* from this widget."
      },
      {
        "parameters": [
          {
            "name": "listeners",
            "type": "EventsObject",
            "description": "A key-value map where the keys are event types and the values are the listeners to deregister from these events, e.g. `{tap: onTap, scroll: onScroll}`."
          }
        ],
        "returns": "this",
        "description": "Removes all listeners in the given object from the event type indicated by their key."
      }
    ],
    "trigger": [
      {
        "parameters": [
          {
            "name": "type",
            "type": "string",
            "description": "The type of event to trigger"
          }
        ],
        "returns": "this",
        "description": "Notifies all registered listeners for the given *type*."
      },
      {
        "parameters": [
          {
            "name": "type",
            "type": "string",
            "description": "The type of event to trigger"
          },
          {
            "name": "object",
            "type": "object",
            "description": "The object to pass to listener functions."
          }
        ],
        "returns": "this",
        "description": "Passes the given *object* it to all listeners registered for this event *type*."
      },
      {
        "parameters": [
          {
            "name": "type",
            "type": "string",
            "description": "The type of event to trigger"
          },
          {
            "name": "eventObject",
            "type": "EventObject",
            "ts_type": "EventObject<this>",
            "description": "An instance of `EventObject` (or a subclass) to pass to listener functions."
          }
        ],
        "returns": "this",
        "description": "Initializes the given *eventObject*  and passes it to all listeners registered for this event *type*."
      }
    ],
    "set": [
      {
        "generics": "T extends keyof Properties<this>",
        "parameters": [
          {
            "name": "property",
            "type": "string",
            "ts_type": "T"
          },
          {
            "name": "value",
            "type": "any",
            "ts_type": "Properties<this>[T]"
          }
        ],
        "description": "Sets the given property.",
        "returns": "this"
      },
      {
        "parameters": [
          {
            "name": "properties",
            "type": "PropertiesObject",
            "ts_type": "Properties<this>"
          }
        ],
        "description": "Sets all key-value pairs in the properties object as widget properties.",
        "returns": "this"
      }
    ],
    "get": {
      "generics": "T extends keyof Properties<this>",
      "parameters": [
        {
          "name": "property",
          "type": "string",
          "ts_type": "T"
        }
      ],
      "returns": "Properties<this>[T]",
      "description": "Gets the current value of the given *property*."
    }
  }
}
