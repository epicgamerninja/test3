{
  "type": "App",
  "object": "app",
  "extends": "NativeObject",
  "description": "Provides information about the application.",
  "constructor": {
    "access": "private",
    "parameters": []
  },
  "properties": {
    "id": {
      "type": "string",
      "readonly": true,
      "description": "Uniquely identifies the app."
    },
    "version": {
      "type": "string",
      "readonly": true,
      "description": "The user facing version number, e.g. '2.1-beta3'."
    },
    "versionCode": {
      "type": "number",
      "readonly": true,
      "description": "An alternative version number used in app stores to identify different versions of an app. Usually incremented with each release. This property reflects the `versionCode` on Android and `CFBundleVersion` on iOS."
    },
    "pinnedCertificates": {
      "type": "any[]",
      "description": "Enables certificate pinning for HTTP requests. When pinned certificates are defined for a host, connections to this host will only be permitted if the server provides a matching certificate. Connections to hosts that are not in the list are not affected.\n\nCertificate pinning affects the following components: XHR/fetch, WebSockets, image loading and app patching. It does *not* affect WebViews.\n\nThe list of pinned certificates has to be in the form of `[{host: <string>, hash: <string>, algorithm: <RSA2048|RSA4096|ECDSA256>}, ..]`.\n\n- The `host` attribute denotes the host name (including subdomain) of the host to be pinned ([wildcards allowed](https://en.wikipedia.org/wiki/Wildcard_DNS_record)).\n- The `hash` attribute is the base64 encoded sha256 fingerprint of the _subjectPublicKeyInfo_, prefixed with `sha256/`.\n- The `algorithm` attribute denotes the public key algorithm of the SSL certificate and can have the values `RSA2048`, `RSA4096` or `ECDSA256`. This attribute is only required on iOS.\n\nExample: `[{host: 'freegeoip.net', hash: 'sha256/+SVYjThgePRQxQ0e8bWTQDRtPYR/xBRufqyMoeaWteo=', algorithm: 'ECDSA256'}]`\n\nFor further details see https://www.owasp.org/index.php/Certificate_and_Public_Key_Pinning."
    }
  },
  "events": {
    "foreground": {
      "description": "The event is fired when the app starts or when it returns from the background."
    },
    "resume": {
      "description": "Fired when the app is visible and ready to interact with the user. The event is preceded by either `foreground` (the app becomes visible again) or `pause` (the app regains ability to interact with user)."
    },
    "pause": {
      "description": "Fired when the app is not the interaction target of the user anymore. Usually preceded by `resume`."
    },
    "background": {
      "description": "Fired when the app becomes invisible. Either because another app is in the foreground or the user has returned to the home screen."
    },
    "terminate": {
      "description": "Fired when the app is being destroyed. After this callback no more interaction with the app is possible.",
      "platforms": {
        "windows": false
      }
    },
    "backNavigation": {
      "description": "Fired when the back button is pressed on Android.",
      "parameters": {
        "preventDefault": {
          "description": "Call to suppress the default back navigation behavior.",
          "type": "() => void"
        }
      }
    }
  },
  "methods": {
    "launch": {
      "parameters": [
        {
          "name": "url",
          "type": "string",
          "description": "The URL to launch."
        }
      ],
      "returns": "Promise<void>",
      "description": "Asks the operating system to open the given URL in an external app. Operating systems usually support a variety of URL schemes including `http`, `https`, `mailto`, `tel`, and `sms`. Apps can also register for custom URL schemes."
    },
    "reload": {
      "parameters": [],
      "description": "Forces the running application to reload the main module and start over.",
      "platforms": {
        "windows": false
      }
    },
    "getResourceLocation": {
      "parameters": [
        {
          "name": "path",
          "type": "string",
          "description": "The path of a resource relative to the application root."
        }
      ],
      "returns": "string",
      "description": "Returns the URL for a given resource that is bundled with the app. Can be used to access app resources like images, videos, etc. Note that these resources can only be accessed in read-only mode."
    },
    "installPatch": {
      "parameters": [
        {
          "name": "url",
          "type": "string",
          "description": "The URL to fetch a patch from."
        },
        {
          "name": "callback",
          "type": "(error: Error|null, patch: any|null) => void",
          "description": "A callback function to be called when the installation has finished or failed. In case of a failure, the callback will receive a parameter `error` that contains an Error object. If the installation succeeds, this parameter will be `null` and a second parameter will contain the parsed content of the file `patch.json` from the installed patch."
        }
      ],
      "description": "Installs a patch from the given URL. When the patch is successfully installed, it will remain inactive until the application is reloaded. Not supported on Windows.",
      "provisional": true
    }
  }
}
